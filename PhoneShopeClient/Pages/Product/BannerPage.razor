@implements IDisposable
@if (ProductService.FeaturedProducts is not null)
{
    <div class="container-fluid mb-5">
        <div class="row">
            @{
                Product Banner1 = ProductService.GetRandomProduct();
                Product Banner2 = ProductService.GetRandomProduct();
            }
            @if (Banner1 is not null )
            {
                <div class="col-lg-6">
                    <div class="First-card">
                        <div class="card-header p-3" style="min-height:280px;">
                                <div class="d-flex justify-content-between">
                                    <div class="text-start">
                                        <h2 style="font-family:Impact"> Disponible a prix avantageux </h2>
                                        <h5 class="text-title">@Banner1.Name</h5>
                                        <p class="text-muted fs-6" style="font-family:Tahoma"> @(General.GetDescription(@Banner1.Description!))</p>
                                        <h6 class="text-muted"> Livraison gratuits disponibles</h6>
                                        <h5 class="text-danger" >@Banner1.Price.ToString("C",CultureInfo.CreateSpecificCulture("fr-FR"))</h5>
                                        <button class="btn btn-danger" @onclick="()=>AddToCart(Banner1)">
                                        <i class="fa fa-cart-shopping"></i> Achetez maintenant
                                        </button>
                                    </div>
                                    <img src="@Banner1.Base64Img" width="150" height="200" class="float-end" />
                                </div>
                         </div>
                        
                        
                    </div>
                </div>
             }
            @if ( Banner2 is not null)
            {
                <div class="col-lg-6">
                    <div class="Second-card">
                        <div class="card-header p-3" style="min-height:280px;">
                            <div class="d-flex justify-content-between">
                                <div class="text-start">
                                    <h2 style="font-family:Impact"> Sécurisez Cette <u>Offre</u> maintenant ! </h2>
                                    <h5 class="text-title">@Banner2.Name</h5>
                                    <p class="text-muted fs-6" style="font-family:Tahoma"> @(General.GetDescription(Banner2.Description!))</p>
                                    <h6 class="text-muted"> Livraison gratuits disponibles</h6>
                                    <h5 class="text-danger">@Banner2.Price.ToString("C", CultureInfo.CreateSpecificCulture("fr-FR"))</h5>
                                    <button class="btn btn-danger" @onclick="()=>AddToCart(Banner2)">
                                        <i class="fa fa-cart-shopping"></i> Achetez maintenant
                                    </button>
                                </div>
                                <img src="@Banner2.Base64Img" width="150" height="200" class="float-end" />
                            </div>
                        </div>
                    </div>
                </div>
            }
             
        </div>
    </div>
}
@if (showModal)
{
    <div class="modal " id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header justify-content-center">
                    Notification!
                </div>
                <!-- Modal body -->
                <div class="modal-body text-center">
                    <div class="alert alert-@AlertType">@Message</div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-@AlertType float-end" @onclick="@ModalCancel">Fermer</button>
                </div>

            </div>
        </div>
    </div>
}
@code {    
    bool showModal = false;
    private string AlertType { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    protected async override Task OnInitializedAsync()
    {
       bool featured = true;
        await ProductService.GetAllProducts(featured);      
        ProductService.ProductAction += StateHasChanged;
    }
    private async Task AddToCart(Product model)
    {
        model.Quantity = 1;
        var (flag, message) = await cartService.AddToCart(model);
        if (flag)
            ModalShow("success", message);
        else
            ModalShow("danger", message);
    }
    void ModalShow(string alert, string message)
    {
        AlertType = alert;
        Message = message;
        showModal = true;
    }
    void ModalCancel()
    {
        AlertType = string.Empty;
        Message = string.Empty;
        showModal = false;
    }
    public void Dispose()
    {
        ProductService.ProductAction -= StateHasChanged;       
    }
}

<style>
    .First-card {
       
        border: 2px solid #fea116;
    }

    .First-card .text-title{
            color: #FEA116;
    }
     .Second-card  {        
        border: 2px solid #8a4200;
    }
    .Second-card .text-title {        
        color: #8a4200;
    }

</style>