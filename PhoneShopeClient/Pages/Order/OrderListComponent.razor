@using Microsoft.AspNetCore.Components.QuickGrid;





<QuickGrid ItemsProvider="orderProvider" Pagination="pagination" class="custom-class">
    <PropertyColumn Property="u=> u.Id" />
    <PropertyColumn Property="u=> u.UserEmail" Title="E-mail" />
    <PropertyColumn Property="u=> u.OrderStatus" Title="Statut" />
    <PropertyColumn Property="u=> u.CreatedOn" Title="Date de Commande" Format="yyyy-MM-dd" />
    
        <TemplateColumn >
        <button class="btn btn-sm btn-primary" @onclick="() => viewOrder(context)"><i class="fa fa-eye"></i></button>           
        </TemplateColumn>

    
</QuickGrid>
<Paginator State="pagination" />


<style>
   
    .custom-class {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1rem;
        background-color: transparent;
    }

        .custom-class th, .custom-class td {
            padding: 0.75rem;
            vertical-align: top;
            border-top: 1px solid #d68b00;
        }

        .custom-class thead th {
            vertical-align: bottom;
            border-bottom: 2px solid #d68b00;
            background-color: #ffdfa4;
        }

        .custom-class tbody tr:nth-of-type(odd) {
            background-color: rgba(140, 90, 0, 0.05);
        }

        .custom-class tbody tr:hover {
            background-color: rgba(140, 90, 0, 0.075);
        }

        .custom-class .btn {
            display: inline-block;
            font-weight: 400;
            color: #212529;
            text-align: center;
            vertical-align: middle;
            user-select: none;
            background-color: transparent;
            border: 1px solid transparent;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            border-radius: 0.25rem;
            transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

        .custom-class .btn-primary {
            color: #fff;
            background-color: #be6b00;
            border-color: #be6b00;
        }

            .custom-class .btn-primary:hover {
                color: #fff;
                background-color: #8a4200;
                border-color: #713600;
            }

        .custom-class .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            line-height: 1.5;
            border-radius: 0.2rem;
        }

       

</style>

@code {
    [Parameter] public List<Order> AllOrders { get; set; } = new();

    private GridItemsProvider<Order> orderProvider;
    private const int PageSize = 10;
    private PaginationState pagination = new() { ItemsPerPage = PageSize };

    protected override void OnInitialized()
    {

        orderProvider = userProviderAsync;
    }
    void viewOrder(Order order)
    {
       var id = order.Id;
        navigationManager.NavigateTo($"/order-details/{id}");
    }

    private async ValueTask<GridItemsProviderResult<Order>> userProviderAsync(GridItemsProviderRequest<Order> request)
    {
        var pageResult = SetPage(request.StartIndex, request.Count ?? PageSize);

        return GridItemsProviderResult.From(pageResult.Records, pageResult.TotalPage);
    }
    public  PageResult<Order> SetPage(int startIndex, int pageSize, string? status= null)
    {
        int total = 0;
        IEnumerable<Order> query;
        List<Order> res = new();
        PageResult<Order> result = new(total, res);
        if(status  is null)
         query = AllOrders.AsEnumerable();
         else 
            query = AllOrders.Where(u => u.OrderStatus != status);
        total = query.Count();
         res = query.Select(item => item).Skip(startIndex)
                                .Take(pageSize).ToList();
            result = new(total, res);
       
        return result;
    }
    public record PageResult<TData>(int TotalPage, List<Order> Records);
}

